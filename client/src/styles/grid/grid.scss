/**
 * Grid styles
 * Description: A reusable class-based mobile-first grid layout.
 *
 * Display: Flexbox
 * Number of columns: 12
 * Gutter width: 30px (15px on each side of a column)
 * Breakpoints: 5 [col-sm ≥ 576px, col-md ≥ 768px, col-lg ≥ 992px, col-xl ≥ 1200px]
 * Nestable: true
 * Column ordering: true
 */

/*
  Variables
*/

$gutter: 30px;
$grid-column-count: 12;
$grid-breakpoints: (
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px
);
$grid-breakpoint-sm: 576px;
$grid-breakpoint-md: 768px;
$grid-breakpoint-lg: 992px;
$grid-breakpoint-xl: 1200px;
$container-max-width-sm: 540px;
$container-max-width-md: 720px;
$container-max-width-lg: 960px;
$container-max-width-xl: 1140px;

/**
 * Mixins
 */

// Add a `max-width` to ensure content within each column does not blow out
// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
// do not appear to require this.
@mixin col-max-width($length_or_pct) {
  max-width: $length_or_pct;
}

/*
  Container classes
*/

.container {
  width: 100%;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
  margin-right: auto;
  margin-left: auto;
}

@media (min-width: $grid-breakpoint-sm) {
  .container {
    max-width: $container-max-width-sm;
  }
}
@media (min-width: $grid-breakpoint-md) {
  .container {
    max-width: $container-max-width-md;
  }
}
@media (min-width: $grid-breakpoint-lg) {
  .container {
    max-width: $container-max-width-lg;
  }
}
@media (min-width: $grid-breakpoint-xl) {
  .container {
    max-width: $container-max-width-xl;
  }
}

/**
 * Rows and column styles
 */

.row {
  display: flex;
  flex-flow: row wrap;
  margin-left: -($gutter / 2);
  margin-right: -($gutter / 2);

  /**
   * Common column properties
   *
   * 1. Prevent columns from becoming too narrow when at smaller grid tiers by
   *    always setting `width: 100%;`. This works because we use `flex` values
   *    later on to override this initial width.
   */

  .col, .col-1, .col-10, .col-11, .col-12, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-lg, .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xl, .col-xl-1, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9 {
    position: relative;
    width: 100%; // 1
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }

  @for $i from 1 to $grid-column-count {
    .col-#{$i} {
      flex: 0 0 percentage($i / $grid-column-count);
      @include col-max-width(percentage($i / $grid-column-count));
    }
  };

  /**
   * Mixin for making grid columns.
   */

  @mixin make-grid-columns($size) {
    @for $i from 1 to $grid-column-count {
      .col-#{$size}-#{$i} {
        flex: 0 0 percentage($i / $grid-column-count);
        @include col-max-width(percentage($i / $grid-column-count));
      }
    }
  }

  @each $key, $value in $grid-breakpoints {
    @media (min-width: $value) {
      @include make-grid-columns($key);
    };
  };
}
